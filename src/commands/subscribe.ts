import TelegramBot from "node-telegram-bot-api";
import { skills } from "../utils/skills";
import { stringSplit } from "../utils";

export async function subscribeCommand(
  chatId: number,
  bot: TelegramBot,
  pages = 0
) {
  const { items, isEnd, page } = await skills(pages);
  const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [
    [
      {
        text: "–ü–æ—à—É–∫ üîé",
        callback_data: "–ü–æ—à—É–∫",
      },
    ],
  ];

  items.forEach((e) =>
    inline_keyboard.push([{ text: e.name, callback_data: "–ü—ñ–¥–ø–∏—Å–∫–∞ " + e.id }])
  );

  if (page !== 0 && !isEnd) {
    inline_keyboard.push([
      {
        text: "‚èÆÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞",
        callback_data: "–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ " + page,
      },
      {
        text: "–ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ‚è≠Ô∏è",
        callback_data: "–ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ " + page,
      },
    ]);
  } else if (page !== 0) {
    inline_keyboard.push([
      {
        text: "‚èÆÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞",
        callback_data: "–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ " + page,
      },
    ]);
  } else {
    inline_keyboard.push([
      {
        text: "–ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ‚è≠Ô∏è",
        callback_data: "–ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ " + page,
      },
    ]);
  }

  return bot.sendMessage(
    chatId,
    stringSplit([
      `–ü—Ä–∏–≤—ñ—Ç, —è –±–æ—Ç —è–∫–∏–π –±—É–¥–µ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –ø—Ä–æ –Ω–æ–≤—ñ –ø—Ä–æ—î–∫—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ FreelanceHunt`,
      `–î–ª—è —Ç–æ–≥–æ —â–æ–± –≤—ñ–¥–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /unsubscribe`,
    ]),
    {
      reply_markup: {
        inline_keyboard,
      },
    }
  );
}
